# -*- coding: utf-8 -*-
"""Thread_Queue.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k4pOv9oCRZy9Qt399GI3pkwmtz5k4l6o
"""

from collections import deque  #Queue Library
import threading  #Thread Library
import time   #Time Library

class Queue:

    orders = ['Pizza', 'Samosa', 'Pasta', 'Biryani', 'Burger']
    
    def __init__(self):               #Constructor
        self.buffer = deque()
    def enque(self, val):             #Adding element
        self.buffer.appendleft(val)
    def deque(self):                  #Removing element
      if len(self.buffer)==0:
        print("Queue is empty.")
        return
      return self.buffer.pop()
    def is_empty(self):           #Empty check function
      return len(self.buffer)==0
    def size(self):               #Gives size of queue
      return len(self.buffer)
    def front(self):              #Gives first element of queue
      return self.buffer[-1]
    def last(self):               #Gives last element of queue
      return self.buffer[0]
   
    def place_order(self):  #Placing order 
      print("Placing Order:", end='\n')
      for i in self.orders:
        self.enque(i)
        print("Placing", i , "in Queue.")
        time.sleep(0.5)
      print("All Ordered.")

    def serve_order(self):  #Serving orders
      for i in range(len(self.orders)):
        print("\tServing", self.deque() , "from Queue.")
        time.sleep(2.0)

order = Queue()  #Class obj

t1 = threading.Thread(target=order.place_order)  #Thread 1
t2 = threading.Thread(target=order.serve_order)  #Thread 2

t1.start()
time.sleep(1.0)
t2.start()

t1.join()
t2.join()

print("\nAll Served.")

